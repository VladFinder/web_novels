// –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π —á–µ—Ä–µ–∑ JSON —Å–µ—Ä–≤–µ—Ä
class JsonStorageService {
  constructor() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    this.apiUrl = process.env.NODE_ENV === 'development' 
      ? 'http://localhost:3001/api' 
      : '/api';
    this.userId = null;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API URL
  getApiUrl() {
    return this.apiUrl;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async saveEmotion(telegramId, { emotion, note, timestamp, username }) {
    try {
      const apiUrl = this.getApiUrl();
      const payload = { telegramId, emotion, note, date: timestamp, username };
      window.lastEmotionPayload = payload; // –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', `${apiUrl}/emotions`);
      console.log('–î–∞–Ω–Ω—ã–µ:', payload);
      
      const response = await fetch(`${apiUrl}/emotions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

      if (!response.ok) {
        const errorData = await response.json();
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
        throw new Error(errorData.error || `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏ (${response.status})`);
      }

      const result = await response.json();
      console.log('–≠–º–æ—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', result);
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏:', error);
      if (error.name === 'TypeError' && error.message.includes('fetch')) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
      }
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
  async getUserEmotions(telegramId, startDate, endDate) {
    try {
      const apiUrl = this.getApiUrl();
      const params = new URLSearchParams({
        telegramId: String(telegramId),
        startDate,
        endDate
      });

      const url = `${apiUrl}/emotions?${params}`;
      console.log('üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞:', url);
      console.log('üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', { telegramId, startDate, endDate });

      const response = await fetch(url);
      
      console.log('üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);
      
      if (!response.ok) {
        const error = await response.json();
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–π');
      }

      const data = await response.json();
      console.log('üîç –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
      console.log('üîç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ—Ü–∏–π:', data.length);
      console.log('üîç –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:', typeof data);
      console.log('üîç –≠—Ç–æ –º–∞—Å—Å–∏–≤?', Array.isArray(data));
      
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–π:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
  async getEmotionByDate(telegramId, date) {
    try {
      const apiUrl = this.getApiUrl();
      const response = await fetch(`${apiUrl}/emotions/${telegramId}/${date}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          return null;
        }
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏');
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ:', error);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —ç–º–æ—Ü–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  async hasEmotionToday(telegramId) {
    try {
      const apiUrl = this.getApiUrl();
      const now = new Date();
      const year = now.getFullYear();
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const day = String(now.getDate()).padStart(2, '0');
      const today = `${year}-${month}-${day}`;
      const response = await fetch(`${apiUrl}/emotions/${telegramId}/${today}`);
      if (!response.ok) {
        return false;
      }
      const result = await response.json();
      return !!result; // true –µ—Å–ª–∏ —ç–º–æ—Ü–∏—è –µ—Å—Ç—å, false –µ—Å–ª–∏ null
    } catch (error) {
      return false;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∫ —ç–º–æ—Ü–∏–∏
  async updateNote(telegramId, date, note) {
    try {
      const apiUrl = this.getApiUrl();
      const response = await fetch(`${apiUrl}/emotions/note`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telegramId, date, note })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏');
      }

      const result = await response.json();
      console.log('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', result);
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–π
  async getEmotionStats(telegramId, startDate, endDate) {
    try {
      const apiUrl = this.getApiUrl();
      const params = new URLSearchParams({
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString()
      });

      const response = await fetch(`${apiUrl}/emotions/stats/${telegramId}?${params}`);
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw error;
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async exportUserData(telegramId) {
    try {
      const apiUrl = this.getApiUrl();
      const response = await fetch(`${apiUrl}/export/${telegramId}`);
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async importUserData(telegramId, data) {
    try {
      const apiUrl = this.getApiUrl();
      const response = await fetch(`${apiUrl}/import/${telegramId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º—ã—Å–ª–∏/–∑–∞–ø–∏—Å–∏
  async saveThought(telegramId, thought, date = null) {
    try {
      const apiUrl = this.getApiUrl();
      const response = await fetch(`${apiUrl}/thoughts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          telegramId, 
          thought, 
          date,
          timestamp: new Date().toISOString()
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—Å–ª–∏');
      }

      const result = await response.json();
      console.log('–ú—ã—Å–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', result);
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º—ã—Å–ª–∏:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º—ã—Å–ª–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥
  async getUserThoughts(telegramId, startDate, endDate) {
    try {
      const apiUrl = this.getApiUrl();
      const params = new URLSearchParams({
        telegramId: String(telegramId),
        startDate: startDate.toISOString(),
        endDate: endDate.toISOString()
      });

      const response = await fetch(`${apiUrl}/thoughts?${params}`);
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º—ã—Å–ª–µ–π');
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º—ã—Å–ª–µ–π:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º—ã—Å–ª–µ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
  async getThoughtsByDate(telegramId, date) {
    try {
      const apiUrl = this.getApiUrl();
      const dateStr = new Date(date).toISOString().split('T')[0];
      const response = await fetch(`${apiUrl}/thoughts/${telegramId}/${dateStr}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          return [];
        }
        const error = await response.json();
        throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º—ã—Å–ª–µ–π');
      }

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º—ã—Å–ª–µ–π –ø–æ –¥–∞—Ç–µ:', error);
      return [];
    }
  }
}

export const jsonStorageService = new JsonStorageService(); 